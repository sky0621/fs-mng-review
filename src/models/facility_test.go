// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFacilities(t *testing.T) {
	t.Parallel()

	query := Facilities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFacilitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFacilitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Facilities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFacilitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FacilitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFacilitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FacilityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Facility exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FacilityExists to return true, but got false.")
	}
}

func testFacilitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	facilityFound, err := FindFacility(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if facilityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFacilitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Facilities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFacilitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Facilities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFacilitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	facilityOne := &Facility{}
	facilityTwo := &Facility{}
	if err = randomize.Struct(seed, facilityOne, facilityDBTypes, false, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}
	if err = randomize.Struct(seed, facilityTwo, facilityDBTypes, false, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = facilityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = facilityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Facilities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFacilitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	facilityOne := &Facility{}
	facilityTwo := &Facility{}
	if err = randomize.Struct(seed, facilityOne, facilityDBTypes, false, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}
	if err = randomize.Struct(seed, facilityTwo, facilityDBTypes, false, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = facilityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = facilityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func facilityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func facilityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Facility) error {
	*o = Facility{}
	return nil
}

func testFacilitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Facility{}
	o := &Facility{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, facilityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Facility object: %s", err)
	}

	AddFacilityHook(boil.BeforeInsertHook, facilityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	facilityBeforeInsertHooks = []FacilityHook{}

	AddFacilityHook(boil.AfterInsertHook, facilityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	facilityAfterInsertHooks = []FacilityHook{}

	AddFacilityHook(boil.AfterSelectHook, facilityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	facilityAfterSelectHooks = []FacilityHook{}

	AddFacilityHook(boil.BeforeUpdateHook, facilityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	facilityBeforeUpdateHooks = []FacilityHook{}

	AddFacilityHook(boil.AfterUpdateHook, facilityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	facilityAfterUpdateHooks = []FacilityHook{}

	AddFacilityHook(boil.BeforeDeleteHook, facilityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	facilityBeforeDeleteHooks = []FacilityHook{}

	AddFacilityHook(boil.AfterDeleteHook, facilityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	facilityAfterDeleteHooks = []FacilityHook{}

	AddFacilityHook(boil.BeforeUpsertHook, facilityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	facilityBeforeUpsertHooks = []FacilityHook{}

	AddFacilityHook(boil.AfterUpsertHook, facilityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	facilityAfterUpsertHooks = []FacilityHook{}
}

func testFacilitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFacilitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(facilityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFacilitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFacilitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FacilitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFacilitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Facilities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	facilityDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`}
	_               = bytes.MinRead
)

func testFacilitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(facilityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(facilityAllColumns) == len(facilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFacilitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(facilityAllColumns) == len(facilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Facility{}
	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, facilityDBTypes, true, facilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(facilityAllColumns, facilityPrimaryKeyColumns) {
		fields = facilityAllColumns
	} else {
		fields = strmangle.SetComplement(
			facilityAllColumns,
			facilityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FacilitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFacilitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(facilityAllColumns) == len(facilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Facility{}
	if err = randomize.Struct(seed, &o, facilityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Facility: %s", err)
	}

	count, err := Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, facilityDBTypes, false, facilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Facility struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Facility: %s", err)
	}

	count, err = Facilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
